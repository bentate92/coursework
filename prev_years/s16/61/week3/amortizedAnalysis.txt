CS261- Assignment 2 - Amortized Analysis*/
Name: Benjamin Tate
Date: 4/17/2016

Questions:

1. cost = 8(1) + 9 + 7(1) + 17 + 15(1)
        = 8 + 9 + 7 + 17 + 15 = 56 cost units
   Big-oh complexity = O(1)+

2. cost = 8 + 9 + 1 + 11 + 1 + 13 + 1 + 15 + 1 + 17 + 1 + 19 + 1 + 
          21 + 1 + 23 + 1 + 25 + 1 + 27 + 1 + 29 + 1 + 31 + 1
        = 12(1) + 8 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 +
          27 + 29 + 31 = 260 cost units
   Big-oh complexity = O(n)

3.   To achieve poor performance in a dynamic array stack with this
   behavior, I would push values onto the stack until the capacity
   was reached (doubling capacity), and then I would pop one value 
   from the stack. At this point, the size of the stack would be
   half of the capacity (causing capacity to be halved).

     To fix this, I would change the shrinking policy to only halve
   the array's capacity when the size is much lower than half of
   the capacity, like 1/4 or even 1/8. This would ensure that the
   array would still have some "wiggle room," even immediately
   after shrinking. 
